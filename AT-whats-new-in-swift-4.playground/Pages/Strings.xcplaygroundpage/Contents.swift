/*:
 [Table of contents](Table%20of%20contents) ‚Ä¢ [Previous page](@previous) ‚Ä¢ [Next page](@next)
 ## String
 ### Multi-Line String Literals
 
 [SE-0168][SE-0168]: This proposal introduces multi-line string literals to Swift source code. This has been discussed a few times on swift-evolution most recently putting forward a number of different syntaxes that could achieve this goal each of which has their own use case and constituency for discussion.

 [SE-0168]: https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md "Swift Evolution Proposal SE-0168: Class and Subtype existentials"
 */
import Foundation

let pleaseDontBeSilent = """
Ng∆∞·ªùi ƒë·ª´ng l·∫∑ng im ƒë·∫øn th·∫ø
V√¨ l·∫∑ng im s·∫Ω gi·∫øt ch·∫øt con tim!
D√π y√™u th∆∞∆°ng ch·∫≥ng c√≤n‚Ä¶anh v·∫´n xin em n√≥i m·ªôt l·ªùi‚Ä¶
Ngo√†i kia bao la th·∫ø gi·ªõi
"""
let multiLineStringLiteral = """
This is one of the best feature add in Swift 4
\n It let‚Äôs you write ‚ÄúDouble Quotes‚Äù without any escaping
and new lines without need of ‚Äú\n‚Äù
"""
print(multiLineStringLiteral)

print(pleaseDontBeSilent)
/*:
 ### String will be treated as collection
 [SE-0163][SE-0163]: Just like it was in Swift version 1.x Strings can be treated as collection. You no longer need to write string.characters.xxx to perform string manipulation.
 
 [SE-0163]: https://github.com/apple/swift-evolution/blob/master/proposals/0163-string-revision-1.md "Swift Evolution Proposal SE-0163: String Revision: Collection Conformance, C Interop, Transcoding"

 */

let message = "Message!"
message.count // no need of message.characters.count
for character in message {  // no need of message.characters
    print(character)
}
/*:
 ### `Substring` is the new type for string slices
 
 String slices are now instances of type `Substring`. Both `String` and `Substring` conform to `StringProtocol`. Almost the entire string API will live in `StringProtocol` so that `String` and `Substring` behave largely the same.
 */
let galaxy = "Milky Way üêÆ"
let endIndex = galaxy.index(galaxy.startIndex, offsetBy: 3)
var milkSubstring = galaxy[galaxy.startIndex...endIndex]   // "Milk"
type(of: milkSubstring)   // Substring.Type

// Concatenate a String onto a Substring
milkSubstring += "ü•õ"     // "Milkü•õ"

// Create a String from a Substring
let milkString = String(milkSubstring) // "Milkü•õ"
